| Flash Point: Fire Rescue is a cooperative game. All the players are on the
| same team and everyone either wins or loses together. To win, the players must
| rescue the victims trapped inside a burning building before the fire gets out of
| control or the building collapses.
|
| Rules retrieved from http://web.archive.org/web/20140416080519/http://www.indieboardsandcards.com/fpfrenglishrules.php

quadrants:
    1 northwest: (0,0) to (3,4)
    1 southwest: (4,1) to (6,4)
    1 northeast: (1,5) to (1,8)
    1 southeast: (4,5) to (6,8)

rooms:
    1 living: (1,1) to (2,3), (3,1) to (4,2)
    1 bedroom: (1,6) to (2,8)
    1 shower: (1,4) to (2,5)
    1 kitchen: (3,3) to (4,6)
    1 games: (3,7) to (4,8)
    1 dining: (5,1) to (6,5)
    1 guest: (5,6) to (6,7)
    1 restroom: (5,8) to (6,8)
    1 outside: (0,0) to (7,9) - (1,1) to (6,8)

doors:
    1 of: (3,1) to (3,0)
    1 of: (1,3) to (1,4)
    1 of: (2,5) to (2,6)
    1 of: (2,8) to (3,8)
    1 of: (4,6) to (4,7)
    1 of: (4,4) to (5,4)
    1 of: (4,8) to (4,9)
    1 of: (6,3) to (7,3)
    1 of: (6,5) to (6,6)
    1 of: (6,7) to (6,8)

threats: fire, smoke

damage: '◼️'
damages: 24 damage

open: ' '
closed: '🚪'
door: open, closed
doors: 8 door

false: ' '
victim: '👱‍♂️'
pois:
    6 false
    12 victim

board: square from grid
    row: 0 to 7
    col: 0 to 9
    coord: row, col

    room: 1 room from rooms where coord in room
    quadrant: 1 quad from quadrants where coord in quad

    threat: 0 to 1 from threats initially:
        fire where coord in initial_fires of scenario

    secret poi: 0 to 1 from poi initially:
        take 1 from poi where coord in initial_pois of scenario

    edge:
        src: square
        dst: 1 from adjacent
        coords: coord of (src, dst)

        door: 0 to 1 from door initially closed where coords in doors

        wall: all:
            room of src != room of dst
            not door

        closed: door = closed
        damaged: 0 to 2 from damages initially empty

    edges: every edge where any:
        room of src = room of dst
        door and not closed
        2 from damaged

    adjacents: dst of edges

lost_pois: 0 to many from pois of scenario initially empty
rescued_pois: 0 to many from pois of scenario initially empty

family_scenario:
    initial_fires:
        (2,2) to (2,3)
        (3,2) to (3,5)
        (4,4)
        (5,6)
        (5,7)
        (6,6)

    initial_pois: (5,1), (2,4), (5,8)

    pois:
        5 false
        10 victim

scenarios:
    family_scenario

scenario: choose 1 from scenarios

| Each Action has a corresponding AP cost to perform.
point: 'AP'
points: 21 point

player:
    colour: 1 from 'red', 'blue', 'orange', 'green', 'yellow', 'white'
    victim: 0 to 1 from pois initially empty
    location: 1 from board initially choose 1 from board where room = 'outside'

players: 1 to 6 player

turns: next 1 from players where not finished
    | A player gets 4 Action Points (AP) to spend on their turn.
    APs: take 4 from points

    action:
        | A player may select from any of the available Actions in any order and
        | spend the appropriate AP to perform it. An action may be performed more than
        | once per turn, so long as the AP cost is spent each time that Action is
        | performed.
        type: choose 1 from:
            'move'
            'open/close door'
            'extinguish'
            'chop'
            | You may not end your turn on a space with Fire.
            'pass' where not threat of location = fire

        | Players may pass. Unspent AP are saved from turn to turn. A player may
        | save a cumulative maximum of 4 AP at the end of their turn. Take an Action
        | marker for each saved AP. On subsequent turns you may spend these Action
        | markers as additional AP to perform Actions.
        where type = 'pass':
            excess: count of APs - 4
            add to points: take excess from actions

        | Flip a Door marker in your space: 1 AP
        where type = 'open/close door':
            add to points: take 1 from APs
            chosen_door: choose 1 from edge of board where location in coords and door
            change door of chosen_door: 1 from door where not = door of chosen_door

        | All Firefighters carry an axe. The axe is used to demolish walls, quickly
        | reach trapped victims or create an escape route from the building.
        where type = 'chop':
            add to points: take 2 from APs
            wall: choose 1 from edge of board where location in coords and wall and not 2 from damaged
            add to damage of wall: take 1 from damages

        | Use your gear to fight the fire in the Firefighter’s space or an Adjacent space:
        | * Remove a Smoke marker from the Board: 1 AP
        | * Flip a Fire marker to Smoke: 1 AP
        | * Remove a Fire marker from the Board: 2 AP
        | It is usually best to completely Extinguish Fire (2 AP); Smoke is liable to reignite.
        where type = 'extinguish':
            extinguishable: location, adjacents of location
            threatened: choose 1 from extinguishable where threat
            treatment: choose 1 from:
                smoke where threat of threatened = fire
                empty
            cost: sum of:
                1
                1 where treatment = empty and threat of threatened = fire
            change threat of threatened: treatment
            add to points: take cost from APs

        | Move your Firefighter to an Adjacent space:
        | * Move to a space without Fire: 1 AP
        | * Move to a space with Fire: 2 AP
        | * Carry a Victim to an open Space or space with Smoke: 2 AP
        where type = 'move':
            change location: choose 1 from adjacents of location where any:
                not threat of location = fire
                threat of location = fire and not victim
            cost: sum of:
                1
                1 where threat of location = fire
                1 where victim
            add to points: take cost from APs

            | If you Move into a space with a POI marker, flip that marker to
            | reveal either a Victim or a False Alarm. If you revealed a False
            | Alarm place it on the Rescued space at the edge of the board.
            | Revealing a POI is a no cost (0AP) action.
            where poi of location:
                change secrecy: empty

            | If you Carry a Victim outside of the building – Congratulations you
            | have just rescued them. Place the Victim marker on the Rescued space
            | at the edge of the board.
            where victim and room of location = 'outside':
                add to rescued_pois: take victim

    actions: many action where APs > 0

    | After taking Actions, the current player must roll the dice to Advance the
    | Fire. Place a Smoke marker on the board in the Target Space corresponding to
    | the numbers rolled on the dice. Sometimes placing the Smoke has a greater
    | impact; after you place the Smoke marker check to see if any of the
    | following situations are created:
    target_space:
        row: 1 from d6
        col: 1 from d8
        target: 1 square from board where:
            row of square = row
            col of square = col

        | * If the Smoke is placed on an existing Fire – You have just caused an
        | Explosion!
        where threat of target = fire:
            | When the fire Advances into a space that is already on Fire, an
            | Explosion occurs. Explosions spread fire quickly, can damage walls
            | or doors, Knock Down Firefighters and even kill Victims.

            | An explosion radiates in all four directions (up, down, left, right) from the
            | Target space (your dice roll). If the Adjacent space in any direction is already
            | on Fire, a Shockwave is created. The Shockwave continues to travel in its
            | respective direction passing through all the spaces that are on Fire until it
            | either encounters an Open space, Smoke filled space, Wall or Closed Door.
            shockwaves: paths of board where:
                any:
                    row of src unique and row of src = row of dst
                    col of src unique and col of src = col of dst
                threat of src = fire

            | What happens with a Shockwave depends on what it hits first:
            | * Open Space (without Fire or Smoke)– Place a Fire marker on the
            |   Open Space, even if that space is outside of the building.
            | * Smoke Filled Space – Flip the Smoke marker to Fire.
            | * Wall – place a Damage marker on the wall. Remember a wall that
            |   already had two Damage markers is Destroyed and will not stop a
            |   Shockwave.
            | * Closed Door – remove the Door marker from the board; it has been
            |   Destroyed. A Doorway with no Door marker is treated as a Destroyed
            |   Wall. Do not place any Damage markers on the Destroyed Door.
            effects: shockwave from shockwaves
                final_edge: 1st from reverse of shockwave
                final_tile: dst of final_edge

                where threat of final_tile = fire:
                    coord_diff: coords of dst of final_edge - coords of src of final_edge
                    next_edge: 1 from edges of final_tile where:
                        coord of dst = coord of src + coord_diff
                    where next_edge and not door of next_edge:
                        add to damages of next_edge: take 1 from damages
                    where next_edge and door of next_edge:
                        add to closed_doors: take door of doors

                where threat of final_tile in smoke, empty:
                    change threat of final_tile: fire

                | If a Shockwave travels through an Open Door, remove that Door
                | marker from the board; the Door has been Destroyed.
                doors: shockwave where door and not closed
                add to closed_doors: take door of doors

        | * If the Smoke is placed on an existing Smoke – Flip one Smoke to a
        | Fire and remove the other Smoke marker from the board. Remember: Smoke +
        | Smoke = Fire.
        where threat of target = smoke:
            change threat of target = fire

        | * If the Smoke is placed Adjacent to a Fire – Flip the Smoke to Fire.
        | Remember: Smoke Adjacent to Fire = Fire.
        adjacent_to_fire: 1 from adjacents where threat = fire
        where threat of target = empty and adjacent_to_fire:
            change threat of target: fire

        where threat of target = empty and not adjacent_to_fire:
            change threat of target: smoke

    | Flip any Smoke marker in a space Adjacent to Fire to Fire. Repeat this
    | step as many times as you can – there should be no Smoke Adjacent to Fire at
    | the end of a turn. Remember: Smoke Adjacent to Fire = Fire.
    flashovers: board where:
        threat = smoke
        1 from adjacents where threat = fire
    change threat of flashovers: fire

    | A Firefighter is Knocked Down when Fire advances into their space; this
    | could be from an explosion or being in a Smoke filled space that ignites. A
    | Firefighter that is knocked down needs to go to the Ambulance to recover.
    | When a Knock Down happens, take the Firefighter from its space and place it
    | on the closest (as the crow flies) Ambulance Parking Spot outside the
    | building. If two Parking Spots are equally distant, choose one. Leave the
    | Fire marker in the space. If the Knocked Down Firefighter was carrying a
    | Victim, that Victim is Lost. Place the Victim marker on the Lost space at
    | the edge of the board.
    knock_downs: players where threat of location = fire
    closest_space: distances of board where:
        src = location
        dst = 1 from ambulances
        distance <= distance of others
    where count of closest_space > 1:
        change closest_space: choose 1 from closest_space

    | Any Victims or POI in a space with Fire are Lost. Place the POI or Victim
    | marker on the Lost space at the edge of the board. If a POI was not
    | identified, Reveal (flip over) the POI then place on the Lost spot.
    damaged_pois: board where:
        threat = fire
        poi
    add to lost_pois: take damaged_pois

    | Remove any Fire markers that were placed outside of the building.
    outside_fire: board where:
        room = outside
        threat = fire
    change threat of outside_fire: empty

    | There should be 3 POI markers on the board (inside or outside of the
    | building) at the end of every turn. Total the unidentified POI markers and
    | Victims on the board. If fewer than three, replenish POI marker(s) on the
    | board by rolling the dice and placing a randomly selected POI marker ?-side
    | up on the Target space (your dice roll). If the Target space has a Fire or
    | Smoke marker, remove that Fire/Smoke marker before placing the POI marker.
    missing_pois: 3 - count of poi of board
    available_spaces: missing_pois from board where not poi
    change threat of available_spaces: empty
    add to poi of available_spaces: take many pois of scenario

    | If the Target space has a Firefighter, immediately reveal (flip) the POI
    | marker and remove it if it is a False Alarm. If the Target space has a POI
    | marker, reroll.
    identifications: location of players where secrecy of poi != empty
    trigger where identifications:
        change secrecy of poi of identifications: empty

| The game ends when the building collapses, the players have won (7 Victims
| Rescued) or the players have been defeated (4+ Victims Lost).
| * Building Collapse – The game ends immediately as the building collapses when all 24 Damage markers
|   have been placed on the board. Place any remaining Victims or POI (inside or
|   outside of the building) on the Lost space at the edge of the board.
| * Victory – The players are victorious when seven Victims have been rescued.
|   If you would like, you can continue to play to see if you can rescue all ten
|   Victims for a perfect game!
| * Defeat – The players are defeated when four or more Victims have
|   been lost.
finished:
    'building collapse' where not 1 from damages
    'victory' where 7 from rescued_pois where = victim
    'defeat' where 4 from lost_pois where = victim
